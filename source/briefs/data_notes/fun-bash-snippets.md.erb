

# ALL TOGETHER

~~~sh
function qtq(){
  if [ -z "$1" ]; then
    limitfoo="head -n 8" # limit by 5 rows plus headers
  else
    if [ $1 -eq 0 ]; then 
      limitfoo="tail -n +1"
    else
      limitfoo="head -n $(($1 + 3))"
    fi
  fi

  pbpaste |
  sed -e '1i\
.headers on' | 
  sqlite3 $MYSQLITEDB |
  csvformat -d \| |
  csvlook |
  perl -p -e "s/(?<=\|) +(?= \|)/ NULL /g" |
  eval $limitfoo |
  sed -e '$a\
{:.table-sql}' |
  
  tee /dev/tty | pbcopy
}
~~~




## Make a SQL table

~~~sh
MYSQLITEDB=SOMEDATABASEFILE.sqlite
# the command
sqlite3 $MYSQLITEDB \
<<< "
.headers on
SELECT *
FROM inspections
LIMIT 5;
" |
sed 's/^/|/' | sed 's/$/|/' |
sed -e '1a\
|-' | sed -e '$a\
{:.table-sql}'
~~~

Alternatively:

~~~sh
function qtq(){
  sed -e '1i\
  .headers on
' | sqlite3 $MYSQLITEDB |
sed 's/^/|/' | sed 's/$/|/' |
sed -e '1a\
|-' | sed -e '$a\
{:.table-sql}'
}
~~~


Or:

~~~sh
function qtq(){
  if [ -z "$1" ]; then
    limitfoo="head -n 8" # limit by 5 rows plus headers
  else
    if [ $1 -eq 0 ]; then 
      limitfoo="tail -n +1"
    else
      limitfoo="head -n $1"
    fi
  fi

  sed -e '1i\
.headers on' | 
  sqlite3 $MYSQLITEDB |
  csvformat -d \| |
  csvlook |
  eval $limitfoo |
  sed -e '$a\
{:.table-sql}'
}
~~~


Sample usage:

~~~sh
echo "SELECT name, address
FROM businesses
WHERE name LIKE 'PIZZA%'
LIMIT 5;" | sqlite3 $MYSQLITEDB | csvformat -d \| | csvlook |
sed -e '$a\
{:.table-sql}'
~~~



Usage:

~~~sh
$ qtq <<< "SELECT * FROM sometable;"
~~~

Or better yet:

~~~sh
$ pbpaste | qtq | pbcopy
~~~


Or even better:

~~~sh
$ pbpaste | qtq | tee /dev/tty | pbcopy
~~~




(todo)

~~~
function sqtq(){
  pbpaste |
  sed -e '1i\
.headers on' | 
  sqlite3 $MYSQLITEDB |
  (head -n4 && tail -n4) | 
  csvformat -d \| |
  csvlook |
  sed -e '$a\
{:.table-sql}' |
  
  tee /dev/tty | pbcopy
}
~~~



sed -e 1b -e '$!d' file


Things I learned:

- Standard input syntax for strings
- How to append a line with sed
- Refreshed my memory on standard input for functions
- Finally used `tee` properly
- Discovered `/dev/tty`
- Learned how to pipe into sqlite3
- how to use realpath





# uploading to AWS

~~~sh
# set FNAME
function tos3(){
  fname="$1"
  zname="$fname.zip"
  s3path="stash.padjo.org/dumps/2015/$(basename $zname)"
  echo http://$s3path 

  zip "$zname" "$fname"
  aws s3 cp $zname s3://$s3path --acl=public-read  
}
  
  
~~~




paste and cat

~~~sh
# $1 is the filename
function verty(){
  fname="$1"
#  if [ -z "$2" ]; then
#    rowno=1
#  else
#    rowno=$2
#  fi
#  rowhed=$(($rowno + 1))
  paste -d '|' <(head -n1 $fname | csvformat -T | tr '\t' '\n') \
        <(head -n $(($2+1)) $fname | csvformat -T | tail -n 1 | tr '\t' '\n') \
        <(head -n $(($3+1)) $fname | csvformat -T | tail -n 1 | tr '\t' '\n') \
        <(head -n $(($4+1)) $fname | csvformat -T | tail -n 1 | tr '\t' '\n') |
        sed -e "1i\\
Column name|Row $2|Row $3|Row $4
" | csvlook -d '|'
}


~~~



~~~
dontuse
function verty(){
  headers="Column name|$(echo "${@:2}" | tr ' ' '|')"
  fname="$1"
  paste -d '|' <(head -n1 $1 | csvformat -T | tr '\t' '\n') \
  <(for i in ${@:2}; do
      rowno=$i
      rowhed=$(($rowno + 1))
      head -n $rowhed $fname | csvformat -T | tail -n 1 | tr '\t' '\n'
    done) | sed -e "1i\\
$headers
" | csvlook -d '|'        
}
~~~
