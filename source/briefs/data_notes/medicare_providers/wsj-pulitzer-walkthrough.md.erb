---
title: Investigating Medicare with SQL 
description: |
  In this walkthrough of the Centers for Medicare & Medicaid provider payment data, we use SQL to test the cliams of the the Wall Street Journal's Pulitzer-winning investigation.
listed: true
---

The [Wall Street Journal was awarded the 2015 Pulitzer for Investigative Reporting](http://www.pulitzer.org/citation/2015-Investigative-Reporting) for their ["Medicare Unmasked"](http://graphics.wsj.com/medicare-billing/) series. The Pulitzer committee described it as a "pioneering project that gave Americans unprecedented access to previously confidential data on the motivations and practices of their health care providers."

[Here's an interactive database](http://graphics.wsj.com/medicare-billing/) they built so that readers could look up doctors and what Medicare payments they received:

<a href="http://graphics.wsj.com/medicare-billing/"><img src="/files/briefs/wsj-medicare/database-front-page-screenshot.png" alt="medicare database"></a>

Here's [the list of stories (in PDF form) submitted to the Pulitzer committee](http://www.pulitzer.org/works/2015-Investigative-Reporting-Group2).

The investigation is a must-read. But we can do better than that. We can follow along using the same data as the WSJ investigative team. While we lack their years of experience and skill in covering this beat, we can at least benefit from their public records fight that forced Medicare to release this payment data and usher in greater transparency for the American health care system.

The [CMS homepage for the data can be found here](https://www.cms.gov/research-statistics-data-and-systems/statistics-trends-and-reports/medicare-provider-charge-data/physician-and-other-supplier.html): the datasets have been updated since the Wall Street Journal's investigation, but the same techniques should apply.

I made a copy of the database and converted it to SQLite3. Unzipped, it weighs in at 1.83GB:

[`stash.padjo.org/dumps/2015/medicare_provider_2012.sqlite.zip`](http://stash.padjo.org/dumps/2015/medicare_provider_2012.sqlite.zip)

I also altered the schema of the database to make it more _space-efficient_ than how CMS had published it. But it's also harder in exactly the way it needs to be to test joins.



# A quick walkthrough of the WSJ investigation



The first story in their series: [Taxpayers Face Big Tab For Unusual Doctor Billings](http://www.pulitzer.org/files/2015/investigative-reporting/wsjmedicare/01wsjmedicare2015.pdf)


# Who is Dr. Ronald Weaver?

This is the first line of the story

> Ronald S. Weaver isn’t a cardiologist.

OK, let's find out:


~~~sql
SELECT 
  nppes_provider_first_name AS first_name,
  nppes_provider_mi AS mid_name,
  nppes_provider_last_org_name AS last_name,
  nppes_provider_gender AS gender,
  nppes_provider_state AS state,
  nppes_entity_code AS entity_code,
  provider_type
FROM practitioners
WHERE 
  nppes_provider_last_org_name = 'WEAVER' 
  AND nppes_provider_first_name = 'RONALD' 
  AND nppes_provider_state = 'CA';
~~~

Lucky for us, it looks like there's only one doctor named Ronald Weaver in California and he is indeed _not_ a cardiologist:

|-------------+----------+-----------+--------+-------+-------------+--------------------|
|  first_name | mid_name | last_name | gender | state | entity_code | provider_type      |
|-------------+----------+-----------+--------+-------+-------------+--------------------|
|  RONALD     | S        | WEAVER    | M      | CA    | I           | Internal Medicine  |
|-------------+----------+-----------+--------+-------+-------------+--------------------|
{:.table-sql}


Just to be safe, let's make sure there are no other Ronald Weaver, or even a _Ron_ Weaver that the WSJ article could be referring to. It's a seemingly common name, and for all we know, the WSJ is referring to a Ronald Weaver who, in a newer/older version of the database, is _not_ listed in California.

### Are there any other Dr. Ron Weavers in America?

It doesn't take too long with SQL to check for variations on the name and expanding the search nationwide. We can just use a simple `COUNT` to confirm Dr. Ronald Weaver's unique name (among doctors participating in Medicare):

~~~sql
SELECT COUNT(*) AS number_of_ron_weavers
FROM practitioners
WHERE 
  nppes_provider_last_org_name LIKE 'WEAVER' 
  AND nppes_provider_first_name LIKE 'RON%';
~~~

|-----------------------|
| number_of_ron_weavers |
|-----------------------|
|                     1 |
|-----------------------|
{:.table-sql}



#  How much did Dr. Weaver make from Medicare in 2012?

Let's move on to the second sentence, which is packed full of possible data queries:


> Yet 98% of the __$2.3 million that the Los Angeles doctor’s practice received from Medicare in 2012__ was for a cardiac procedure, according to recently released government data.

We'll get to that __98%__ part later, let's find out where "$2.3 million" comes from:


~~~sql
SELECT 
  nppes_provider_first_name AS first_name,
  nppes_provider_mi AS mid_name,
  nppes_provider_last_org_name AS last_name,
  nppes_provider_state AS state,
  provider_type,
  total_medicare_allowed_amt,
  total_medicare_payment_amt
FROM practitioners
WHERE 
  nppes_provider_last_org_name = 'WEAVER' 
  AND nppes_provider_first_name = 'RONALD' 
  AND nppes_provider_state = 'CA';
~~~

Looks like Dr. Weaver's `total_medicare_payment_amt` field rounds to $2.3 million:

|-------------+----------+-----------+-------+-------------------+----------------------------+-----------------------------|
|  first_name | mid_name | last_name | state | provider_type     | total_medicare_allowed_amt | total_medicare_payment_amt  |
|-------------+----------+-----------+-------+-------------------+----------------------------+-----------------------------|
|  RONALD     | S        | WEAVER    | CA    | Internal Medicine | 2916171.30999897           | 2311513.10999804            |
|-------------+----------+-----------+-------+-------------------+----------------------------+-----------------------------|
{:.table-sql}


We also get an early lesson on the difference between what's _allowed_ for Medicare and what is actually _paid_: in Dr. Weaver's case, the difference is more than $600,000.


## Going beyond the aggregate total payment

Let's return to the other parts of that second lede sentence:


> __Yet 98%__ of the $2.3 million that the Los Angeles doctor’s practice received from Medicare in 2012 __was for a cardiac procedure__, according to recently released government data.

There's nothing in the `practitioners` table that has specific breakdowns of the aggregate value in `total_medicare_payment_amt`, which is what we want to find 98% of. 

So let's turn our attention to the `individual_payments` table.

## Scouting out the individual_payments table

Unfortunately, there are no doctor names in the `individual_payments` table, so we can't go searching for `'Ronald Weaver'`. So let's look at the first few columns among the first rows in the `individual_payments` table:

~~~sql
SELECT npi,
  nppes_entity_code,
  provider_type,
  medicare_participation_indicator AS mpi,
  place_of_service,
  hcpcs_code,
  hcpcs_description
FROM individual_payments
LIMIT 6;
~~~

|-------------+-------------------+-------------------+-----+------------------+------------+---------------------------|
|  npi        | nppes_entity_code | provider_type     | mpi | place_of_service | hcpcs_code | hcpcs_description         |
|-------------+-------------------+-------------------+-----+------------------+------------+---------------------------|
|  1003000126 | I                 | Internal Medicine | 1   | F                | 99222      | Initial hospital care     |
|  1003000126 | I                 | Internal Medicine | 1   | F                | 99223      | Initial hospital care     |
|  1003000126 | I                 | Internal Medicine | 1   | F                | 99231      | Subsequent hospital care  |
|  1003000126 | I                 | Internal Medicine | 1   | F                | 99232      | Subsequent hospital care  |
|  1003000126 | I                 | Internal Medicine | 1   | F                | 99233      | Subsequent hospital care  |
|  1003000126 | I                 | Internal Medicine | 1   | F                | 99238      | Hospital discharge day    |
|-------------+-------------------+-------------------+-----+------------------+------------+---------------------------|
{:.table-sql}



The first 3 columns look familiar -- e.g. `provider_type` containing `Internal Medicine`, just as we saw in our first query. But `npi` looks like it could be a __unique identifier__ for a doctor.

And sure enough, the `practitioners` table has its own `npi` column. Let's add it to our original query for Ronald Weaver:


~~~sql
SELECT 
  npi,
  nppes_provider_first_name AS first_name,
  nppes_provider_mi AS mid_name,
  nppes_provider_last_org_name AS last_name
FROM practitioners
WHERE 
  nppes_provider_last_org_name = 'WEAVER' 
  AND nppes_provider_first_name = 'RONALD' 
  AND nppes_provider_state = 'CA';
~~~

|-------------+------------+----------+------------|
|  npi        | first_name | mid_name | last_name  |
|-------------+------------+----------+------------|
|  1669465928 | RONALD     | S        | WEAVER     |
|-------------+------------+----------+------------|
{:.table-sql}




### Let's be paranoid about clean data

(Note: this section goes off the path, so feel free to skip it as I make a big deal of what seems like a pretty well-documented facet of this dataset. However, you can never be too sure that the data has the promised integrity, so I show some quick ways to practice SQL and get some peace of mind)

So what is the `npi`? According to the Centers for Medicare & Medicaid Services, `npi` is an abbreviation for [National Provider Identifier](https://www.cms.gov/Regulations-and-Guidance/HIPAA-Administrative-Simplification/NationalProvIdentStand/index.html?redirect=/nationalprovidentstand/), which "is a unique identification number for covered health care providers" and is meant to be permanent and unique to a specific person, even if they change jobs or locations. 


Sounds good, but real-world data often falls short of the ideal.

How do we know that someone else doesn't have Dr. Weaver's same `npi` number? It's just one query away:

~~~sql
SELECT COUNT(*)
FROM practitioners
WHERE 
  npi = '1669465928';
~~~

|------------|
|  COUNT(*)  |
|------------|
|  1         |
|------------|
{:.table-sql}

OK, that's good for what we're doing right now with looking at the WSJ's reporting on Dr. Weaver. 

But what about all the other `npi` values?

In fact, with a group count, we can be sure that _all_ `npi` numbers in the `practitioners` database are unique and each belong to one person. I'll go through a few examples -- this isn't that key of a concept, but it's a nice time to review the many different ways we can solve the same problem.

Doing a `COUNT(*)` with no other filtering conditions returns the number of rows in the dataset:

~~~sql
SELECT COUNT(*) FROM practitioners;
~~~

And doing a `COUNT(DISTINCT npi)` counts all the _unique_ values of a given field. 

~~~sql
SELECT COUNT(DISTINCT npi) FROM practitioners;
~~~


If every row in `practitioners` has a _unique_ `npi`, then by definition, the total number of rows should be equal to number of unique `npi` values:

~~~sql
SELECT 
  COUNT(*) AS total_row_count, 
  COUNT(DISTINCT npi) AS unique_npi_count
FROM practitioners;
~~~

|------------------+-------------------|
|  total_row_count | unique_npi_count  |
|------------------+-------------------|
|  880644          | 880644            |
|------------------+-------------------|
{:.table-sql}

Just in case you're not convinced of that logic (for what it's worth, I'm always unsure of how `DISTINCT` works), let's try the same query, but using columns we assume are _not_ unique, such as the first and last name of a provider:

~~~sql
SELECT 
  COUNT(*) AS total_row_count, 
  COUNT(DISTINCT nppes_provider_last_org_name) AS unique_last_names,
  COUNT(DISTINCT nppes_provider_first_name) AS unique_first_names,
  COUNT(DISTINCT nppes_provider_last_org_name || nppes_provider_first_name || nppes_provider_state) 
      AS unique_full_names_by_state
  FROM practitioners;
~~~

(curious to what `SELECT nppes_provider_last_org_name || nppes_provider_first_name` does? Try it out yourself)

|------------------+-------------------+--------------------+-----------------------------|
|  total_row_count | unique_last_names | unique_first_names | unique_full_names_by_state  |
|------------------+-------------------+--------------------+-----------------------------|
|  880644          | 228973            | 54935              | 806803                      |
|------------------+-------------------+--------------------+-----------------------------|
{:.table-sql}

The implications of the `unique_full_names_by_state` being less than the `total_row_count` means that, even in a given state, you can't be sure that there's only one doctor with a given name.



Another way to count dupes: `GROUP BY` the `npi` column and give it an _alias_, such as `npi_dupe_count`. If every `npi` is unique, `npi_dupe_count` should be `1` for every `npi` value. Or, another way to put it is that `npi_dupe_count` should never _not_ be equal to `1`:


~~~sql
SELECT COUNT(*) AS npi_dupe_count
FROM practitioners
GROUP BY npi
HAVING npi_dupe_count != 1;
~~~

Note how I use `HAVING` instead of `WHERE`: due to the order in which things execute in SQL, the `WHERE` clause has no knowledge of the aggregate query and thus can't refer to `npi_dupe_count`. Thus, [the `HAVING` clause](https://www.sqlite.org/lang_select.html#resultset).


One more thing to check: the CMS says that the NPI is ["a 10-position, intelligence-free numeric identifier (10-digit number)"](https://www.cms.gov/Regulations-and-Guidance/HIPAA-Administrative-Simplification/NationalProvIdentStand/index.html).

That's easy to check with the `LENGTH` function:

~~~sql
SELECT LENGTH(npi) AS npi_length,
  COUNT(*) AS npis_with_this_length
FROM practitioners
GROUP BY npi_length;
~~~

Looks like all of them are exactly 10-characters:

|-------------+------------------------|
|  npi_length | npis_with_this_length  |
|-------------+------------------------|
|  10         | 880644                 |
|-------------+------------------------|
{:.table-sql}



## Finding all payments to a specific NPI

So now that we're pretty certain that Dr. Weaver's NPI -- `1669465928` -- belongs to him and him alone, let's find all the records in `individual_payments` that belong to him. This is just a simple `WHERE` clause:

~~~sql
SELECT npi,
  place_of_service,
  hcpcs_code, hcpcs_description, 
  line_srvc_cnt, bene_unique_cnt
FROM individual_payments
WHERE npi = '1669465928';
~~~

Two things to note:

1. The `individual_payments` records do not refer to each _single_ operation to be covered by Medicare (thing of how big that file would be). Instead, it appears to show an aggregate count of operations per `npi` -- in other words, CMS already did the `GROUP BY npi` for us, though it was probably in their best interest.
2. Dr. Weaver did 5 different operations for 2012.

|-------------------+------------+-----------------------------+---------------+------------------|
|  place_of_service | hcpcs_code | hcpcs_description           | line_srvc_cnt | bene_unique_cnt  |
|-------------------+------------+-----------------------------+---------------+------------------|
|  O                | 82947      | Assay glucose blood quant   | 8613.0        | 265              |
|  O                | 85610      | Prothrombin time            | 78.0          | 25               |
|  O                | 93000      | Electrocardiogram complete  | 12.0          | 12               |
|  O                | 99214      | Office/outpatient visit est | 16.0          | 16               |
|  O                | G0166      | Extrnl counterpulse, per tx | 16619.0       | 615              |
|-------------------+------------+-----------------------------+---------------+------------------|
{:.table-sql}

OK, just what were we trying to find again? Let's refer back to the WSJ's opening graf:

> Ronald S. Weaver isn't a cardiologist. Yet 98% of the $2.3 million that the Los Angeles doctor's practice received from Medicare in 2012 was for a __cardiac procedure__, according to recently released government data.

OK, so one of these 5 operations is a "cardiac procedure" that resulted in 98% of Weaver's Medicare payments in 2012. We have a 1 in 5 chance of picking the right one. But let's try to think this through.

It seems like the procedures with the highest quantities in the two adjoining columns -- e.g. `'Assay glucose blood quant'` and `'Extrnl counterpulse, per tx'`...unless they were really _cheap_. Looks like we need more information.

### Time for a time-out?

If you don't work in the medical industry, many of these fields may be confusing to you. This would be a good time to check [CMS's extensive and somewhat intimidating documentation](https://www.cms.gov/research-statistics-data-and-systems/statistics-trends-and-reports/medicare-provider-charge-data/physician-and-other-supplier.html). 

Or, let's just stick to following the WSJ's lead and see what we can deduce with our SQL exploration. This is not to say that querying a database is in _any way_ a replacement for research and reporting. But the documentation on Medicare is _extensive_; by getting hands-on experience with the details, we can greatly focus our later research by getting to know more of our "known unknowns".

In this case, there are a lot of unknowns: what does `hcpcs` stand for, though it seems both the `code` and `description` are used to identify a procedure (we can use the same strategy as we did with `npi` to verify a one-to-one relationship between `code` and `description`). Less obvious are the fieldnames `line_srvc_cnt` and `bene_unique_cnt`, though they obviously deal with counts of some sort.

Let's bring in the other columns in `individual_payments`, while keeping the same `WHERE` statement:


~~~sql
SELECT npi,
  hcpcs_description, 
  line_srvc_cnt, bene_unique_cnt, bene_day_srvc_cnt,
  ROUND(average_Medicare_allowed_amt) AS medicare_avg_allowed_amt,
  ROUND(average_Medicare_payment_amt) AS medicare_avg_payment_amt
FROM individual_payments
WHERE npi = '1669465928';
~~~

|-------------+-----------------------------+---------------+-----------------+-------------------+--------------------------+---------------------------|
|  npi        | hcpcs_description           | line_srvc_cnt | bene_unique_cnt | bene_day_srvc_cnt | medicare_avg_allowed_amt | medicare_avg_payment_amt  |
|-------------+-----------------------------+---------------+-----------------+-------------------+--------------------------+---------------------------|
|  1669465928 | Assay glucose blood quant   | 8613.0        | 265             | 5328              | 4.0                      | 4.0                       |
|  1669465928 | Prothrombin time            | 78.0          | 25              | 78                | 6.0                      | 6.0                       |
|  1669465928 | Electrocardiogram complete  | 12.0          | 12              | 12                | 21.0                     | 17.0                      |
|  1669465928 | Office/outpatient visit est | 16.0          | 16              | 16                | 112.0                    | 90.0                      |
|  1669465928 | Extrnl counterpulse, per tx | 16619.0       | 615             | 15792             | 173.0                    | 137.0                     |
|-------------+-----------------------------+---------------+-----------------+-------------------+--------------------------+---------------------------|
{:.table-sql}


Well, `'Extrnl counterpulse, per tx'` has the highest `line_srvc_cnt` *and* the highest average Medicare payment. Let's do the math in a query:


~~~sql
SELECT npi,
  hcpcs_description, 
  (line_srvc_cnt * average_Medicare_payment_amt) AS total_payment,
  (line_srvc_cnt * average_Medicare_payment_amt / 2300000.0) AS ronald_pct
FROM individual_payments
WHERE npi = '1669465928'
ORDER BY total_payment DESC;
~~~

Looks like we have a winner:

|-------------+-----------------------------+------------------+-----------------------|
|  npi        | hcpcs_description           | total_payment    | ronald_pct            |
|-------------+-----------------------------+------------------+-----------------------|
|  1669465928 | Extrnl counterpulse, per tx | 2274250.2700811  | 0.988804465252652     |
|  1669465928 | Assay glucose blood quant   | 35188.7600000673 | 0.0152994608695945    |
|  1669465928 | Office/outpatient visit est | 1439.04          | 0.000625669565217391  |
|  1669465928 | Prothrombin time            | 433.68           | 0.00018855652173913   |
|  1669465928 | Electrocardiogram complete  | 201.36           | 8.75478260869565e-05  |
|-------------+-----------------------------+------------------+-----------------------|
{:.table-sql}

[And if you can get beyond the WSJ website's paywall](http://www.wsj.com/articles/taxpayers-face-big-medicare-tab-for-unusual-doctor-billings-1402364264), there's the full description of `Extrnl counterpulse, per tx`:

![image](/files/briefs/wsj-medicare/ronald-weaver-wsj-front-counterpulse.jpg)



