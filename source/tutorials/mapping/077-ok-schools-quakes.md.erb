---
title: Oklahoma earthquakes and schools and CartoDB Spatial Joins
listed: true
references: 
  - title: Learning SQL through the CartoDB Editor
    url: http://academy.cartodb.com/courses/sql-postgis/intro-to-sql-and-postgis/
    description: A video tutorial on basic SQL in CartoDB
  - title: PostGIS in CartoDB
    url: http://academy.cartodb.com/courses/sql-postgis/postgis-in-cartodb/
    description: |
      via the CartoDB summary text: "This lesson introduces several commonly used functions in PostGIS with the goal of extending your geospatial analysis of data within CartoDB and show you some of the analysis you can do with your geospatial data."
---


# Geospatial operations in CartoDB

Check out their tutorial video -- embedded below -- and [read the walkthrough here](http://academy.cartodb.com/courses/sql-postgis/postgis-in-cartodb/).

<iframe src="https://player.vimeo.com/video/120176143" width="500" height="282" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>



# Datasets

- Oklahoma schools directory
  + [Landing page](http://www.ok.gov/sde/sites/ok.gov.sde/files/documents/files/2015_Oklahoma_Public_School_SITE_Directory.csv)
  + [Original CSV](http://www.ok.gov/sde/state-school-directory)
  + [Geocoding script](https://gist.github.com/dannguyen/31f747419caba40f83e4)
  + [Geocoded CSV](/files/data/cartodb/geocoded_ok_schools.csv)
- USGS Earthquake Archive
  + [Landing page](http://earthquake.usgs.gov/earthquakes/search/
)
  + [CSV](http://earthquake.usgs.gov/fdsnws/event/1/query.csv?starttime=2008-01-01%2000:00:00&maxlatitude=37.321&minlatitude=33.306&maxlongitude=-93.933&minlongitude=-103.293&minmagnitude=2&eventtype=earthquake&endtime=2015-11-30%2023:59:59&orderby=time) 
- County shape files
  + [Landing page](http://geo.ou.edu/cgi-bin/redesign.cgi?ft=db&template=DataLayer.htm&DataLayersID=17) 
  + [Zip file](http://geo.ou.edu/oeb/Statewide/COUNTY.zip)
- USGS fault lines for Oklahoma:
  + [Landing page](https://mrdata.usgs.gov/geology/state/state.php?state=OK) 
  + [Zip file](http://pubs.usgs.gov/of/2005/1351/data/OKfaults_dd.zip)


# Walkthrough


## Uploading the datasets to CartoDB

Upload the data to CartoDB with these direct URLs:

- [OK schools as geocoded by Mapzen](/files/data/cartodb/geocoded_ok_schools.csv)
- [OK county shapefiles](http://geo.ou.edu/oeb/Statewide/COUNTY.zip)
- [OK quakes via USGS](/files/data/cartodb/usgs_ok_quakes.csv)
- [OK fault lines via USGS](http://pubs.usgs.gov/of/2005/1351/data/OKfaults_dd.zip)


## Use a geospatial join to show only earthquakes in Oklahoma

The USGS earthquake data was collected by drawing a rectangle around Oklahoma that encompassed nearby states. 

![image ok-quakes-no-borders.png](/files/images/tutorials/cartodb/ok-quakes-no-borders.png)


We just want Oklahoma quakes for now. We need to use a spatial join, which is a feature of the PostgreSQL on CartoDB -- [checkout their tutorial here](http://academy.cartodb.com/courses/sql-postgis/intro-to-sql-and-postgis/):

~~~sql
SELECT ok_quakes.*
FROM ok_quakes
INNER JOIN ok_counties 
  ON ST_WITHIN(ok_quakes.the_geom, 
                ok_counties.the_geom);
~~~

![image ok-quakes-within-borders.png](/files/images/tutorials/cartodb/ok-quakes-within-borders.png)

## Add a buffer around earthquakes

More [info can be found at the CartoDB tutorial](http://academy.cartodb.com/courses/sql-postgis/postgis-in-cartodb/#show-buffers). I adapt their code to mark a 10-mile radius around each quake:

~~~sql
SELECT
  ok_quakes.cartodb_id,
  ST_Buffer(ok_quakes.the_geom_webmercator, 10 * 1609)
    AS the_geom_webmercator
FROM ok_quakes
INNER JOIN ok_counties 
  ON ST_WITHIN(ok_quakes.the_geom, 
                ok_counties.the_geom);
~~~


![image ok-quakes-within-borders-10-mile-radius.png](/files/images/tutorials/cartodb/ok-quakes-within-borders-10-mile-radius.png)


## Buffer just the big ones

http://docs.cartodb.com/tutorials/circle_point_radius/

~~~sql
SELECT
  ok_quakes.cartodb_id,
  ST_Buffer(ok_quakes.the_geom_webmercator::geography, 
            55 * 1609)::geometry
    AS the_geom_webmercator
FROM ok_quakes
INNER JOIN ok_counties 
  ON ST_WITHIN(ok_quakes.the_geom, 
                ok_counties.the_geom)
WHERE ok_quakes.mag > 4.0
~~~


-----------

http://cse.ssl.berkeley.edu/segwayed/lessons/earthquake_country/5eqcountry.b2abaginfo.html





# Filter and display some dots

As always, we start with the simplest way to get things to show up on a map. Let's show _all_ (6,000+) of the earthquake points:

~~~sql
SELECT *
FROM ok_quakes;
~~~


![image ok_quakes_all_of_em.png](/files/images/tutorials/cartodb/ok_quakes_all_of_em.png)



## First, show the "big" earthquakes

It's a cool visual, but it has about __zero__ actual information value to those who aren't impressed with seeing a bunch of dots. So let's filter for just the _major_ earthquakes.


### What kind of quakes does Oklahoma normally have?

Well, how do we define "normal"? Not just for Oklahoma and earthquakes, but for anything in life? I honestly don't know. And honestly, I don't have the attention span to think about it while I'm trying to figure out SQL and spreadsheets.

So I'm just going to get a __group count__ of all the earthquakes, according to _groups_ of their __magnitude__, rounded to the nearest __integer__:



~~~sql
SELECT 
  ROUND(mag) AS rounded_mag,
  COUNT(*)
FROM ok_quakes
GROUP BY rounded_mag
ORDER by rounded_mag;
~~~

![image ok_quakes_histogram_mag.png](/files/images/tutorials/cartodb/ok_quakes_histogram_mag.png)


(Note: why do I convert `mag`, a column that is already a number, to `numeric`? I don't know enough about [PostgreSQL's number types](http://www.postgresql.org/docs/8.1/static/functions-math.html) but without that conversion, I was getting an error when trying to call the `ROUND` function with 2 arguments. So, this works for now...)

~~~sql
SELECT 
  ROUND(mag::numeric, 2) AS rounded_mag,
  COUNT(*)
FROM ok_quakes
WHERE mag >= 4.0
GROUP BY rounded_mag
ORDER by rounded_mag;
~~~


![image ok_quakes_histogram_mag_tenths.png](/files/images/tutorials/cartodb/ok_quakes_histogram_mag_tenths.png)

Just to keep things visually simple, I think we can define "major" earthquakes to be of at least __M4.5__. That means we can expect to see `8` earthquake points on the map:

~~~sql
SELECT *
FROM ok_quakes
WHERE mag >= 4.5;
~~~

![image ok_quakes_4-5-above.png](/files/images/tutorials/cartodb/ok_quakes_4-5-above.png)



### Trim the fields we SELECT

And now, be less lazy and select only the fields we need:

~~~sql
SELECT
  cartodb_id,
  the_geom_webmercator
FROM ok_quakes
WHERE mag >= 4.5;
~~~

The map view won't change -- though there will be no earthquake-specific data (e.g. specific magnitude or dates) since we've left out those columns:

![image ok_quakes_4-5-above-no-detail.png](/files/images/tutorials/cartodb/ok_quakes_4-5-above-no-detail.png)

-----------



# Boundaries


Now we're ready to run some geospatial-specific queries. You may have noticed that at least one of our __M4.5+__ earthquakes is not actually within Oklahoma's boundaries:





Let's start by adding Oklahoma-related shapefiles, i.e. the state and county boundaries.




# Population

![image ok-census-tracts-form.png](/files/images/tutorials/cartodb/ok-census-tracts-form.png)




# Drawing some "buffered" dots



Let's start with the __ST_BUFFER__ function , which 


##


http://docs.cartodb.com/tips-and-tricks/geospatial-analysis/

~~~sql
SELECT
  cartodb_id,
  ST_Transform(
        ST_Buffer(the_geom::geography, 1609 * 10)::geometry, 
                  3857) AS the_geom_webmercator
FROM ok_quakes
WHERE mag >= 4.5;
~~~
