---
title: Oklahoma earthquakes and schools and CartoDB Spatial Joins
listed: true
references: 
  - title: Learning SQL through the CartoDB Editor
    url: http://academy.cartodb.com/courses/sql-postgis/intro-to-sql-and-postgis/
    description: A video tutorial on basic SQL in CartoDB
  - title: PostGIS in CartoDB
    url: http://academy.cartodb.com/courses/sql-postgis/postgis-in-cartodb/
    description: |
      via the CartoDB summary text: "This lesson introduces several commonly used functions in PostGIS with the goal of extending your geospatial analysis of data within CartoDB and show you some of the analysis you can do with your geospatial data."
---



-----------






# Filter and display some dots

As always, we start with the simplest way to get things to show up on a map. Let's show _all_ (6,000+) of the earthquake points:

~~~sql
SELECT *
FROM ok_quakes;
~~~


![image ok_quakes_all_of_em.png](/files/images/tutorials/cartodb/ok_quakes_all_of_em.png)



## First, show the "big" earthquakes

It's a cool visual, but it has about __zero__ actual information value to those who aren't impressed with seeing a bunch of dots. So let's filter for just the _major_ earthquakes.


### What kind of quakes does Oklahoma normally have?

Well, how do we define "normal"? Not just for Oklahoma and earthquakes, but for anything in life? I honestly don't know. And honestly, I don't have the attention span to think about it while I'm trying to figure out SQL and spreadsheets.

So I'm just going to get a __group count__ of all the earthquakes, according to _groups_ of their __magnitude__, rounded to the nearest __integer__:



~~~sql
SELECT 
  ROUND(mag) AS rounded_mag,
  COUNT(*)
FROM ok_quakes
GROUP BY rounded_mag
ORDER by rounded_mag;
~~~

![image ok_quakes_histogram_mag.png](/files/images/tutorials/cartodb/ok_quakes_histogram_mag.png)


(Note: why do I convert `mag`, a column that is already a number, to `numeric`? I don't know enough about [PostgreSQL's number types](http://www.postgresql.org/docs/8.1/static/functions-math.html) but without that conversion, I was getting an error when trying to call the `ROUND` function with 2 arguments. So, this works for now...)

~~~sql
SELECT 
  ROUND(mag::numeric, 2) AS rounded_mag,
  COUNT(*)
FROM ok_quakes
WHERE mag >= 4.0
GROUP BY rounded_mag
ORDER by rounded_mag;
~~~


![image ok_quakes_histogram_mag_tenths.png](/files/images/tutorials/cartodb/ok_quakes_histogram_mag_tenths.png)

Just to keep things visually simple, I think we can define "major" earthquakes to be of at least __M4.5__. That means we can expect to see `8` earthquake points on the map:

~~~sql
SELECT *
FROM ok_quakes
WHERE mag >= 4.5;
~~~

![image ok_quakes_4-5-above.png](/files/images/tutorials/cartodb/ok_quakes_4-5-above.png)



### Trim and specify the fields we SELECT

And now, be less lazy and select only the fields we need:

~~~sql
SELECT
  ok_quakes.cartodb_id,
  ok_quakes.the_geom_webmercator
FROM ok_quakes
WHERE mag >= 4.5;
~~~

The map view won't change -- though there will be no earthquake-specific data (e.g. specific magnitude or dates) since we've left out those columns:

![image ok_quakes_4-5-above-no-detail.png](/files/images/tutorials/cartodb/ok_quakes_4-5-above-no-detail.png)

-----------


# Boundaries

You may have noticed that at least one of our __M4.5+__ earthquakes is not actually within Oklahoma's boundaries:

![image ok_quakes_4-5-above-no-detail.png](/files/images/tutorials/cartodb/ok_quakes_4-5-above-no-detail.png)

Or maybe you didn't. Because you aren't even able to pick Oklahoma from a state map. And the contrast of the map tiles, in which state lines are _not_ emphasized, isn't making it any easier.


So let's start our geospatial-querying with the very limited goal of just making the darn state of Oklahoma actually visible to normal-sighted human beings. 

## Adding a layer of county boundaries

Note: In this section, I talk about using the [__Add Layer__ feature of CartoDB](http://docs.cartodb.com/tutorials/multilayer_overview/). This has _nothing_ to do with SQL or geospatial analysis. It is simply a CartoDB-specific feature for their [interactive maps](http://docs.cartodb.com/tutorials/multilayer_overview/), to allow casual users to add multiple layers of visual imagery onto a map without doing any type of logical SQL joining.

I use the __Add Layer__ feature here just to remind you what shapefiles look like when rendered on a map, that's all. And also, that there's a difference between what we _see_, and what we tell the computer to _geospatially filter_.

After uploading the Oklahoma county boundaries -- [which can be found at this URL](http://geo.ou.edu/oeb/Statewide/COUNTY.zip) -- as a __new dataset__, I can go back to whatever map I was using to show the `M4.5` earthquakes.

In the sidepanel, I click on the top panel labeled __Add layer__

![image ok-add-new-layer.png](/files/images/tutorials/cartodb/ok-add-new-layer.png)

This will prompt me to create an actual map -- (but aren't we already on a map? Well, not technically -- and yes, that will seem confusing...):

![image a-map-is-required-to-create-layers.png](/files/images/tutorials/cartodb/a-map-is-required-to-create-layers.png){:.bordered}

Anyway, after creating a new map, I'm presented with my list of datasets, from which I add the Oklahoma county shapefiles. And here's the result:

![image ok-new-map-layer-counties.png](/files/images/tutorials/cartodb/ok-new-map-layer-counties.png)

OK, we've accomplished our goal: we can clearly see that one earthquake that is _north_ of Oklahoma. Now, let's __filter__ it out with SQL.

(At this point, I can just remove the counties layer...it was just a visual thing anyway...but I leave it in the following examples as a visual reference point)


## Geo-filtering with ST_WITHIN

Let's actually take a step back and think of the _pseudo-code_ -- i.e. the plain English steps of what we intend to do:

> Show only the earthquakes in which the latitude and longitude are _inside_ -- i.e. __within__-- the boundaries of the __state__ of Oklahoma.

Actually, we don't have the state boundaries, and I don't feel like looking up a new shapefile to download. But we can still use the _counties_ shapefile to the same effect:

> Show only the earthquakes in which the latitude and longitude are within any of the boundaries of Oklahoma's _counties_.

It's computationally different, but the effect is the same. Now let's think about the query. We can basically think of it as an `INNER JOIN` with the `ok_counties` dataset/table, with some kind of function/conditional statement in the constraint:

~~~sql
SELECT
  ok_quakes.cartodb_id,
  ok_quakes.the_geom_webmercator
FROM ok_quakes
INNER JOIN ok_counties
  ON SOMETHING_SOMETHING_SOMETHING
WHERE mag >= 4.5;
~~~


What is that `SOMETHING_SOMETHING_SOMETHING`? Well, just a placeholder for now, while we figure out the name of the geospatial function will do the job that we've described in pseudocode.

### The ST_WITHIN geospatial function

It's worth reading more CartoDB tutorials for the bigger picture; for example, this [example uses a function named __ST_INTERSECTS__](http://academy.cartodb.com/courses/sql-postgis/joining-data/#join-two-tables-by-geospatial-intersection).

For our purposes, the function [__ST_WITHIN__](http://postgis.net/docs/ST_Within.html) will serve the same purpose. This is how it's described:

> `boolean ST_Within(geometry A, geometry B);` -- Returns true if the geometry __A__ is completely inside geometry __B__

Whatever. But at least we can see that it returns `true` -- which is something we need a function to do when doing a `JOIN`. What is `geometry A` -- i.e. what are the names of the columns in our __ok_quakes__ and __ok_counties__ tables?

These are things related to CartoDB's specific operation. Go ahead and skim through their tutorial titled __[Geospatial Analysis](http://docs.cartodb.com/tips-and-tricks/geospatial-analysis/)__.

Then see if the following query makes sense to you (if not, re-read the tutorial, repeat, etc.):

~~~sql
SELECT
  ok_quakes.cartodb_id,
  ok_quakes.the_geom_webmercator
FROM ok_quakes
INNER JOIN ok_counties
  ON ST_WITHIN(ok_quakes.the_geom, ok_counties.the_geom)
WHERE mag >= 4.5;
~~~

Begone Kansas quake:

![image ok-county-join-quakesst-within.png](/files/images/tutorials/cartodb/ok-county-join-quakesst-within.png)

And thus, we've successfully told CartoDB, via SQL, how to filter geospatial data based on _logic and math_.

As you can see, we had to learn a new function -- `ST_WITHIN` -- but we used the basic SQL concepts we've used plenty of times before.


# Census population

Showing _where_ big earthquakes have happened in Oklahoma is not particularly newsworthy. To paraphrase one of those websites with Zen quotes, if a big earthquake happens and there's nothing to shake, did it really happen?

In other words, big earthquakes in unpopulated areas -- for which there might be substantial quantities of in Oklahoma -- aren't particularly newsworthy. So let's get some population data via the [U.S. Census's Download Center](http://factfinder.census.gov/faces/nav/jsf/pages/download_center.xhtml):

![image ok-census-tracts-form.png](/files/images/tutorials/cartodb/ok-census-tracts-form.png)


http://www2.census.gov/geo/tiger/TIGER_DP/2013ACS/ACS_2013_5YR_TRACT_40.gdb.zip




# Drawing some "buffered" dots

TKTK

Let's start with the __ST_BUFFER__ function , which 


##


http://docs.cartodb.com/tips-and-tricks/geospatial-analysis/

~~~sql
SELECT
  cartodb_id,
  ST_Transform(
        ST_Buffer(the_geom::geography, 1609 * 10)::geometry, 
                  3857) AS the_geom_webmercator
FROM ok_quakes
WHERE mag >= 4.5;
~~~


http://cse.ssl.berkeley.edu/segwayed/lessons/earthquake_country/5eqcountry.b2abaginfo.html
