---
title: Oklahoma earthquakes and schools and CartoDB Spatial Joins
listed: true
banner:
  iframe_url: https://daannguyen.cartodb.com/viz/e7b64fe8-9ebc-11e5-883d-0e3ff518bd15/embed_map
references: 
  - title: Learning SQL through the CartoDB Editor
    url: http://academy.cartodb.com/courses/sql-postgis/intro-to-sql-and-postgis/
    description: A video tutorial on basic SQL in CartoDB
  - title: PostGIS in CartoDB
    url: http://academy.cartodb.com/courses/sql-postgis/postgis-in-cartodb/
    description: |
      via the CartoDB summary text: "This lesson introduces several commonly used functions in PostGIS with the goal of extending your geospatial analysis of data within CartoDB and show you some of the analysis you can do with your geospatial data."
---





# All over again



## Add Census tract shapefiles


Add the Census tract boundary data.

### Download the tract boundary shapefiles

[Cartographic Boundary Shapefiles](https://www.census.gov/geo/maps-data/data/tiger-cart-boundary.html)

Specifically here:

[Cartographic Boundary Shapefiles - Census Tracts](https://www.census.gov/geo/maps-data/data/cbf/cbf_tracts.html)

And Oklahoma: http://www2.census.gov/geo/tiger/GENZ2014/shp/cb_2014_40_tract_500k.zip
 
([mirror here](/files/data/cartodb/ok-schoolquakes/oklahoma--cb_2014_40_tract_500k.zip))

### Creating the ok_tracts dataset

The resulting map:

![image ok_tracts_uploaded.png](/files/images/tutorials/cartodb/ok-schoolquakes/ok_tracts_uploaded.png)




## Add American Community Survey Median Household Income data

Go to the [American FactFinder](http://factfinder.census.gov/faces/nav/jsf/pages/index.xhtml) and choose the __Advanced search__ option.


Via the Advanced search:

Geographies > Census Tract > Oklahoma > All Census Tracts within Oklahoma

Topics > People > Income & Earnings > Income/Earnings (Households)


B19013 - MEDIAN HOUSEHOLD INCOME IN THE PAST 12 MONTHS (IN 2014 INFLATION-ADJUSTED DOLLARS) 
Universe: Households
2014 ACS 5-year estimates

Selecting that table in the view

![image ok-schoolquakes-map-acs-selected-data.png](/files/images/tutorials/cartodb/ok-schoolquakes-map-acs-selected-data.png)

Here's the detailed view

![image ok-schoolquakes-map-acs-selected-data-detailed-view.png](/files/images/tutorials/cartodb/ok-schoolquakes-map-acs-selected-data-detailed-view.png)

Downloading the file, a copy of which I have here: 

[ACS_14_5YR_B19013.zip](/files/data/cartodb/ok-schoolquakes/ACS_14_5YR_B19013.zip){:.url}

Unzipping, and opening __ACS_14_5YR_B19013_with_ann.csv__:

![image ok-schoolquakes-downloaded-b19013-with-ann-csv.png](/files/images/tutorials/cartodb/ok-schoolquakes-downloaded-b19013-with-ann-csv.png)

I edited the `ACS_14_5YR_B19013_with_ann.csv` file and removed the second line, which is just an annotation, and uploaded to CartoDB as a table named __ok_median_household_incomes__. You can download the CSV here:

[ok_median_household_incomes.csv](/files/data/cartodb/ok-schoolquakes/ok_median_household_incomes.csv)

### Creating the ok_median_household_incomes dataset and joining it to ok_tracts

Remember that the median household incomes dataset contains no geospatial shape or coordinate data itself. But it contains a column -- `geo_id` -- that can be joined with `ok_tracts.affgeoid`:

~~~sql
SELECT 
  ok_median_household_incomes.hd01_vd01 AS median_household_income,
  ok_median_household_incomes.geo_display_label,
  ok_tracts.cartodb_id, 
  ok_tracts.the_geom_webmercator
FROM ok_median_household_incomes
INNER JOIN ok_tracts ON
  ok_tracts.affgeoid = ok_median_household_incomes.geo_id;
~~~


Making a choropleth so that the darker green regions represent higher-income areas:

![image ok_median_household_incomes_choropleth.png](/files/images/tutorials/cartodb/ok-schoolquakes/ok_median_household_incomes_choropleth.png)

At this point, we can hit the __Visualize__ or (__Publish__) button to turn this into what CartoDB considers to be an actual __map__ -- which allows us to add additional data layers.


## Add the earthquakes

### Getting the earthquake data from USGS 

[CSV](http://earthquake.usgs.gov/fdsnws/event/1/query.csv?starttime=2008-01-01%2000:00:00&maxlatitude=37.321&minlatitude=33.306&maxlongitude=-93.933&minlongitude=-103.293&minmagnitude=2&eventtype=earthquake&endtime=2015-11-30%2023:59:59&orderby=time) 

Mirror: [ok_earthquakes.csv](files/data/cartodb/ok-schoolquakes/ok_earthquakes.csv)

### Creating the ok_earthquakes dataset and adding it as a layer

![image ok_earthquakes_new_layer.png](/files/images/tutorials/cartodb/ok-schoolquakes/ok_earthquakes_new_layer.png)


### Filtering for just the big ones

The SQL to include only M4.5+ earthquakes:

~~~sql
SELECT *
FROM ok_earthquakes
WHERE mag >= 4.5;
~~~

What the result looks like on a map:

![image ok_earthquakes_m4-5_quakes_only.png](/files/images/tutorials/cartodb/ok-schoolquakes/ok_earthquakes_m4-5_quakes_only.png)

### Filtering for Oklahoma-only quakes via ST_WITHIN spatial join to ok_tracts

Because of the sloppy selection job I did on the USGS Earthquake Archive form, one of these earthquakes actually took place in Kansas. Using the PostGIS [__ST_WITHIN__](http://postgis.net/docs/ST_Within.html function) as a constraint, I filter out non-Oklahoman earthquakes using the geospatial boundary data found in `ok_tracts` (I keep the `WHERE` clause to keep filtering for M4.5 earthquakes):

~~~sql
SELECT
  ok_earthquakes.*
FROM ok_earthquakes
INNER JOIN ok_tracts
  ON ST_WITHIN(ok_earthquakes.the_geom, ok_tracts.the_geom)
WHERE mag >= 4.5;
~~~

Begone Kansas quake:

![image ok_earthquakes_m4-5_quakes_within_tracts_only.png](/files/images/tutorials/cartodb/ok-schoolquakes/ok_earthquakes_m4-5_quakes_within_tracts_only.png)


### Add the 4-mile circle

Using the ST_BUFFER function to change the geometry of each earthquake point into a circle with a radius of 4-miles, and then using ST_TRANSFORM function to translate it to the projection used by CartoDB:

~~~sql
SELECT
  id, depth, mag, place, time, 
  ok_earthquakes.cartodb_id,
  ST_Transform(
      ST_BUFFER(ok_earthquakes.the_geom::geography, 
               1609 * 4)::geometry, 
     3857) AS the_geom_webmercator
FROM ok_earthquakes
INNER JOIN ok_tracts
  ON ST_WITHIN(
      ok_earthquakes.the_geom, 
      ok_tracts.the_geom)
WHERE mag >= 4.5;
~~~


And here's the earthquakes, now as 4-mile-radius polygon circles:

![image ok_earthquakes_m4-5_quakes_4mile_radius.png](/files/images/tutorials/cartodb/ok-schoolquakes/ok_earthquakes_m4-5_quakes_4mile_radius.png)

At this point, I've taken advantage of CartoDB's option to __create a new dataset__ from my now-convoluted query of `ok_earthquakes`. The new dataset I have named __ok_earthquakes_radii__, which has a schema that consists of only a few fields from __ok_quakes__ (e.g. `time`, `place`, `id` and `mag`); CartoDB has automatically set the `the_geom` column to have the coordinate data that draws those 4-mile circles.









## Adding the schools data



### Get the schools data

The National Center for Education Statistics publishes the [Public Elementary/Secondary School Universe Survey Data](http://nces.ed.gov/ccd/pubschuniv.asp), which includes the names, addresses, and demographics of every school in the United States. 

The data file for [2013-2014 is 14.1MB zipped](http://nces.ed.gov/ccd/Data/zip/sc131a_supp_txt.zip)/107MB unzipped tab-delimited file.

### Trim the schools data

Ideally we could just upload the tab-delimited file straight into CartoDB; it might work for you; for me, it did not. So I just imported the file into my own SQL database, ran the following query, and saved the results as new CSV file, which I then uploaded to CartoDB:

~~~sql
SELECT
  SURVYEAR,NCESSCH,LEANM,SCHNAM,LCITY,LSTATE,LZIP,TYPE,STATUS,
  GSLO,GSHI,LEVEL,TITLEISTAT,TITLEI,CHARTR,VIRTUALSTAT,
  FRELCH,REDLCH,TOTFRL,MEMBER,
  LATCOD AS latitude,
  LONCOD AS longitude
FROM schools_directory
WHERE LSTATE = 'OK';
~~~

The filtered file can be found here: [ok_schools.csv](/files/data/cartodb/ok-schoolquakes/ok_schools.csv){:.url}

### Show all schools

![image ok_schools_uploaded.png](/files/images/tutorials/cartodb/ok-schoolquakes/ok_schools_uploaded.png)




### Show by free lunch

#### Create a new column

~~~sql
ALTER TABLE ok_schools
ADD COLUMN frlp_ratio INTEGER;
~~~

#### Add that ratio

~~~sql
UPDATE ok_schools
SET frlp_ratio = ROUND(TOTFRL * 100 / MEMBER);
~~~

The resulting choropleth:

![image ok_schools_frlp_choropleth.png](/files/images/tutorials/cartodb/ok-schoolquakes/ok_schools_frlp_choropleth.png)




### Filter for being near earthquake

~~~sql
SELECT ok_schools.* 
FROM ok_schools
INNER JOIN ok_earthquakes_radii
ON ST_WITHIN(
  ok_schools.the_geom, 
  ok_earthquakes_radii.the_geom);
~~~


![image ok_schools_within_4_miles_of_quakes.png](/files/images/tutorials/cartodb/ok-schoolquakes/ok_schools_within_4_miles_of_quakes.png)

A closeup with Crescent High School highlighted:

![image ok_schools_within_4_miles_of_quakes_closeup.png](/files/images/tutorials/cartodb/ok-schoolquakes/ok_schools_within_4_miles_of_quakes_closeup.png)


Dataset:

![image ok_schools_within_4_miles_of_quakes_dataset.png](/files/images/tutorials/cartodb/ok-schoolquakes/ok_schools_within_4_miles_of_quakes_dataset.png)

